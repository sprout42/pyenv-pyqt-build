#!/bin/bash
# Summary: Install pyqt4 for the current active python version
#
# Usage: pyenv pyqt4 install [<version>] [--qmake="path/to/qmake"] [--confirm-license]
#        pyenv pyqt4 uninstall
#        pyenv pyqt4 versions
#        pyenv pyqt4 update
#        pyenv pyqt4 show
#
# Install, check, or uninstall PyQt4 for the current pyenv version.
# If the `qmake` executable is not in the default path or discoverable through 
# `brew` it must be specified during install.

set -e
[ -n "$PYENV_DEBUG" ] && set -x

# dup STDOUT to FD 3 so any function that needs to print to STDOUT and return 
# values can use FD 3 for the output channel
exec 3<&1

# source the script with some common functionality
source $(dirname $0)/utils.sh

sw_name=PyQt4

update_versions() {
    update_src_versions "${sw_name}"
}

print_versions() {
    print_src_versions "${sw_name}"
}

# Provide pyenv completions
if [ "$1" == "--complete" ]; then
    if [ $# -ge 2 ] && [ "$2" == "install" ]; then
        # First add the explicitly supported install/config flags
        echo --qmake
        versions=( $(print_versions) )
        for ver in "${versions[@]}"; do
            echo ${ver}
        done
        echo latest
        echo default
    else
        echo install
        echo uninstall
        echo versions
        echo update
        echo show
    fi
    exit 0
fi

# abort if the system python is used
no_system_version
utils_avail

usage() {
    pyenv-help pyqt4 2>/dev/null
    [ -z "$1" ] || exit "$1"
}

# Attempt to auto-find a qmake executable
set +e
qmake_path=$(which qmake)
if [ $? -ne 0 ]; then
    # Check if brew exists, if it does and QT is installed use `brew` to find 
    # the qmake path.
    brew_path=$(which brew)
    # This is unlikely to succeed since homebrew doesn't have a QT4 target
    # anymore, but it's worth trying in case someone has added a custom recipe.
    if [ $? -eq 0 ]; then
        qmake_path=$(realpath "$("${brew_path}" --prefix qt@4)/bin/qmake" 2> /dev/null)
    fi
fi
set -e

# Process the arguments, this should will set the following variables that allow 
# us to process the appropriate action:
# * sw_version
# * config_args
#
# This function requires the following variables to be set:
# * sw_name
# * config_args
#       any required configuration options can be set before calling this 
#       function and be maintained
# * qmake_path (used only for PyQT* modules)
#
# This function requires the following functions to be defined:
# * usage
# * print_versions
# * update_versions
unset sw_version
config_args="--confirm-license"
process_pyqt_build_cli $@
check_qt_version

_all_vers=( $(print_versions) )
_src_vers=( $(print_src_versions "${sw_name}") )

# Confirm that the version supplied is either valid, "latest", or "default"
if [[ ! "${_all_vers[*]} latest default" =~ "${sw_version}" ]]; then
    echo "Invalid ${sw_name} version ${sw_version}" >&2
    exit 1
fi

case "${sw_version}" in
"default" )
    # Use the QT version set by check_qt_version()
    sw_version="${qt_version}"
    ;;
"latest" )
    # Use the last version in the list
    sw_version="${_all_vers[-1]}"
    ;;
esac

# Add the qmake_path to the pyqt configure args
config_args="${config_args} --qmake=${qmake_path}"

# Confirm that the version is something that can be installed from a source 
# release
if [[ "${_src_vers[*]} latest" =~ "${sw_version}" ]]; then
    src_install "${sw_name}" "${sw_version}" "${config_args}"
    exit 0
fi

# If we have reached here then the version selected can't be installed from 
# source, so throw an error.
#
# This shouldn't be reachable if the script logic is correct, but just in case.
echo "Unable to identify method to install ${sw_name} ${sw_version}" >&2
exit 1
