#!/bin/bash
# Summary: Install pyqt4 for the current active python version
#
# Usage: pyenv pyqt4 install [<version>] [--qmake="path/to/qmake"] [--confirm-license]
#        pyenv pyqt4 uninstall
#        pyenv pyqt4 versions
#        pyenv pyqt4 update
#        pyenv pyqt4 show
#
# Install, check, or uninstall PyQt5 for the current pyenv version.
# If the `qmake` executable is not in the default path or discoverable through 
# `brew` it must be specified during install.

set -e
[ -n "$PYENV_DEBUG" ] && set -x

# dup STDOUT to FD 3 so any function that needs to print to STDOUT and return 
# values can use FD 3 for the output channel
exec 3<&1

# source the script with some common functionality
source $(dirname $0)/utils.sh

sw_name=PyQt4

update_versions() {
    update_src_versions "${sw_name}"
}

print_versions() {
    print_src_versions "${sw_name}"
}

# Provide pyenv completions
if [ "$1" = "--complete" ]; then
    if [ $# -ge 2 ] && [ "$2" == "install" ]; then
        # First add the extra configuration flags
        echo --qmake
        echo --confirm-license
        versions=( $(print_versions) )
        for ver in "${versions[@]}"; do
            echo ${ver}
        done
        echo latest
        echo default
    else
        echo install
        echo uninstall
        echo versions
        echo update
        echo show
    fi
    exit 0
fi

# abort if the system python is used
no_system_version
utils_avail

usage() {
    pyenv-help pyqt4 2>/dev/null
    [ -z "$1" ] || exit "$1"
}

unset sw_version
unset qmake_path

# Attempt to auto-find a qmake executable
qmake_path=$(which qmake)
if [ $? -ne 0 ]; then
    # Check if brew exists, if it does and QT is installed use `brew` to find 
    # the qmake path.
    brew_path=$(which brew)
    if [ $? -eq 0 ]; then
        qmake_path="$("${brew_path}" --prefix qt)/bin/qmake"
    fi
fi

# Process CLI parameters
while [ $# -gt 0 ]; do
    arg="$1"

    case "$arg" in
    "-h" | "--help" )
        usage 0
        ;;
    "update" )
        update_versions

        # Add "latest" which will be the last version and "default" which means 
        # match the current installed QT version.
        echo "latest"
        echo "default"
        exit 0
        ;;
    "versions" )
        # Print the possible versions that can be installed
        print_versions

        # Add "latest" which will be the last version and "default" which means 
        # match the current installed QT version.
        echo "latest"
        echo "default"
        exit 0
        ;;
    "show" )
        sw_version=$(get_installed_version "${sw_name}")
        # Print the installed package version and the SIP package version
        echo "${sw_name} ${sw_version} installed"
        pyenv-sip show
        exit 0
        ;;
    "uninstall" )
        uninstall "${sw_name}"
        exit 0
        ;;
    "install" )
        # set "default" as the default version to install, this may get 
        # overridden later
        sw_version="default"
        ;;
    "--qmake" )
        if [ $# -ge 2 ]; then
            # The next argument is the qmake path
            qmake_path="$2"
            shift # extra shift for the qmake path we consumed
        else
            usage 1 >&2
        fi
        ;;
    "--confirm-license" )
        pyqt_configure_args="--confirm-license"
        ;;
    * )
        # If sw_version is set to "default" then this must be the version number 
        # to install
        if [ "${sw_version}" == "default" ]; then
            sw_version="$arg"
        else
            usage 1 >&2
        fi
        ;;
    esac

    shift # Keep processing args
done

if [ -z "${qmake_path}" ]; then
    echo "Unable to determine installed QT version, use the --qmake argument" >&2
    exit 1
fi

qt_version=$("${qmake_path}" -query | sed -n 's/QT_VERSION://p')
# The installed QT (qmake -query) and selected PyQT version to install must 
# match
if [ "${qt_version}" != "${sw_version}" ]; then
    echo "Unable to install ${sw_name} ${sw_version}, QT version is ${qt_version}" >&2
    echo "Use --qmake option to specify path to correct qmake executable for ${sw_name} ${sw_version}" >&2
    exit 1
fi

# Add the qmake_path to the pyqt configure args
pyqt_configure_args="${pyqt_configure_args} --qmake=${qmake_path}"

_all_vers=( $(print_versions) )

# Confirm that the version supplied is either a valid version or "latest"
if [[ ! "${_all_vers[*]} latest" =~ "${sw_version}" ]]; then
    echo "Invalid ${sw_name} version ${sw_version}" >&2
    exit 1
elif [ "${sw_version}" == "latest" ]; then
    sw_version="${_all_vers[-1]}"
fi

# Only option for pyqt4 is a source install, so try it
src_dir=$(get_source "${sw_name}" "${sw_version}")
check_sip_version "${sw_name}" "${sw_version}" "${src_dir}"
compile "${sw_name}" "${sw_version}" "${src_dir}" "${pyqt_configure_args}"
exit 0
