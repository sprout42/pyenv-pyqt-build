#!/bin/bash
# Summary: Install sip for the current active python version
#
# Usage: pyenv sip install <version>
#        pyenv sip uninstall
#        pyenv sip versions
#        pyenv sip update
#        pyenv sip show
# 
# Install, check, or uninstall SIP for the current pyenv version

set -e
[ -n "$PYENV_DEBUG" ] && set -x

# dup STDOUT to FD 3 so any function that needs to print to STDOUT and return 
# values can use FD 3 for the output channel
exec 3<&1

# source the script with some common functionality
source $(dirname $0)/utils.sh

sw_name=sip
sip_hg_repo="https://www.riverbankcomputing.com/hg/sip"

update_versions() {
    cat <(update_src_versions "${sw_name}") \
        <(update_pip_versions "${sw_name}") \
        <(update_hg_versions "${sw_name}" "${sip_hg_repo}") | sort -uV
}

print_versions() {
    cat <(print_src_versions "${sw_name}") \
        <(print_pip_versions "${sw_name}") \
        <(print_hg_versions "${sw_name}" "${sip_hg_repo}") | sort -uV
}

# Provide pyenv completions
if [ "$1" = "--complete" ]; then
    if [ $# -ge 2 ] && [ "$2" == "install" ]; then
        versions=( $(print_versions) )
        for ver in "${versions[@]}"; do
            echo ${ver}
        done
        echo latest
    else
        echo install
        echo uninstall
        echo versions
        echo update
        echo show
    fi
    exit 0
fi

# abort if the system python is used
no_system_version
utils_avail

usage() {
    pyenv-help sip 2>/dev/null
    [ -z "$1" ] || exit "$1"
}

# Process the arguments, this should will set the following variables that allow 
# us to process the appropriate action:
# * sw_version
# * config_args
#
# This function requires the following variables to be set:
# * sw_name
# * config_args
#       any required configuration options can be set before calling this 
#       function and be maintained
# * qmake_path (used only for PyQT* modules)
#
# This function requires the following functions to be defined:
# * usage
# * print_versions
# * update_versions
unset sw_version
unset config_args
process_pyqt_build_cli $@

_all_vers=( $(print_versions) )
_pip_vers=( $(print_pip_versions "${sw_name}") )
_src_vers=( $(print_src_versions "${sw_name}") )
_hg_vers=( $(print_hg_versions "${sw_name}" "${sip_hg_repo}") )

# Confirm that the version supplied is either a valid version or "latest"
if [[ ! "${_all_vers[*]} latest" =~ "${sw_version}" ]]; then
    echo "Invalid ${sw_name} version ${sw_version}" >&2
    exit 1
elif [ "${sw_version}" == "latest" ]; then
    sw_version="${_all_vers[-1]}"
fi

# Lastly SIP version 5+ can't be installed if the python version is < 3.5
compare_versions "5.0.0" "${sw_version}"
# $? < 2 means 0 (equal) or 1 (target version is > 5.0.0)
if [ $? -lt 2 ]; then
    # If the version to install is >= 5.x then python >=3.5 is required
    is_greater_35=$(python -c 'import sys; print(sys.version_info >= (3, 5))')
    if [ "$is_greater_35" != "True" ]; then
        echo "Cannot install ${sw_name} ${sw_version}, python version 3.5+ required" >&2
        exit 1
    fi
fi

# If this is a pip version try installing through pip
if [[ "${_pip_vers[*]} latest" =~ "${sw_version}" ]]; then
    pip_install "${sw_name}" "${sw_version}" "${config_args}"
    exit 0
fi

# Confirm that the version is something that can be installed from a source 
# release
if [[ "${_src_vers[*]} latest" =~ "${sw_version}" ]]; then
    src_install "${sw_name}" "${sw_version}" "${config_args}"
    exit 0
fi

# Last option - try building from mercurial
if [[ "${_hg_vers[*]} latest" =~ "${sw_version}" ]]; then
    hg_install "${sw_name}" "${sw_version}" "${config_args}"
    exit 0
fi

# If we have reached here then the version selected can't be installed from pip, 
# from source, or from mercurial, so throw an error
#
# This shouldn't be reachable if the script logic is correct, but just in case.
echo "Unable to identify method to install ${sw_name} ${sw_version}" >&2
exit 1
